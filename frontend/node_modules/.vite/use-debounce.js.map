{
  "version": 3,
  "sources": ["../use-debounce/esm/useDebounce.js", "../use-debounce/esm/useDebouncedCallback.js", "../use-debounce/esm/useThrottledCallback.js"],
  "sourcesContent": ["import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback from './useDebouncedCallback';\nfunction valueEquality(left, right) {\n    return left === right;\n}\nfunction adjustFunctionValueOfSetState(value) {\n    return typeof value === 'function' ? function () { return value; } : value;\n}\nfunction useStateIgnoreCallback(initialState) {\n    var _a = useState(adjustFunctionValueOfSetState(initialState)), state = _a[0], setState = _a[1];\n    var setStateIgnoreCallback = useCallback(function (value) { return setState(adjustFunctionValueOfSetState(value)); }, []);\n    return [state, setStateIgnoreCallback];\n}\nexport default function useDebounce(value, delay, options) {\n    var eq = (options && options.equalityFn) || valueEquality;\n    var _a = useStateIgnoreCallback(value), state = _a[0], dispatch = _a[1];\n    var debounced = useDebouncedCallback(useCallback(function (value) { return dispatch(value); }, [dispatch]), delay, options);\n    var previousValue = useRef(value);\n    if (!eq(previousValue.current, value)) {\n        debounced(value);\n        previousValue.current = value;\n    }\n    return [state, debounced];\n}\n", "import { useRef, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = useRef(null);\n    var lastInvokeTime = useRef(0);\n    var timerId = useRef(null);\n    var lastArgs = useRef([]);\n    var lastThis = useRef();\n    var result = useRef();\n    var funcRef = useRef(func);\n    var mounted = useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    // You may have a question, why we have so many code under the useMemo definition.\n    //\n    // This was made as we want to escape from useCallback hell and\n    // not to initialize a number of functions each time useDebouncedCallback is called.\n    //\n    // It means that we have less garbage for our GC calls which improves performance.\n    // Also, it makes this library smaller.\n    //\n    // And the last reason, that the code without lots of useCallback with deps is easier to read.\n    // You have only one place for that.\n    var debounced = useMemo(function () {\n        var invokeFunc = function (time) {\n            var args = lastArgs.current;\n            var thisArg = lastThis.current;\n            lastArgs.current = lastThis.current = null;\n            lastInvokeTime.current = time;\n            return (result.current = funcRef.current.apply(thisArg, args));\n        };\n        var startTimer = function (pendingFunc, wait) {\n            if (useRAF)\n                cancelAnimationFrame(timerId.current);\n            timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n        };\n        var shouldInvoke = function (time) {\n            if (!mounted.current)\n                return false;\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            // Either this is the first call, activity has stopped and we're at the\n            // trailing edge, the system time has gone backwards and we're treating\n            // it as the trailing edge, or we've hit the `maxWait` limit.\n            return (!lastCallTime.current ||\n                timeSinceLastCall >= wait ||\n                timeSinceLastCall < 0 ||\n                (maxing && timeSinceLastInvoke >= maxWait));\n        };\n        var trailingEdge = function (time) {\n            timerId.current = null;\n            // Only invoke if we have `lastArgs` which means `func` has been\n            // debounced at least once.\n            if (trailing && lastArgs.current) {\n                return invokeFunc(time);\n            }\n            lastArgs.current = lastThis.current = null;\n            return result.current;\n        };\n        var timerExpired = function () {\n            var time = Date.now();\n            if (shouldInvoke(time)) {\n                return trailingEdge(time);\n            }\n            // https://github.com/xnimorz/use-debounce/issues/97\n            if (!mounted.current) {\n                return;\n            }\n            // Remaining wait calculation\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            var timeWaiting = wait - timeSinceLastCall;\n            var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n            // Restart the timer\n            startTimer(timerExpired, remainingWait);\n        };\n        var func = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var time = Date.now();\n            var isInvoking = shouldInvoke(time);\n            lastArgs.current = args;\n            lastThis.current = _this;\n            lastCallTime.current = time;\n            if (isInvoking) {\n                if (!timerId.current && mounted.current) {\n                    // Reset any `maxWait` timer.\n                    lastInvokeTime.current = lastCallTime.current;\n                    // Start the timer for the trailing edge.\n                    startTimer(timerExpired, wait);\n                    // Invoke the leading edge.\n                    return leading ? invokeFunc(lastCallTime.current) : result.current;\n                }\n                if (maxing) {\n                    // Handle invocations in a tight loop.\n                    startTimer(timerExpired, wait);\n                    return invokeFunc(lastCallTime.current);\n                }\n            }\n            if (!timerId.current) {\n                startTimer(timerExpired, wait);\n            }\n            return result.current;\n        };\n        func.cancel = function () {\n            if (timerId.current) {\n                useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n            }\n            lastInvokeTime.current = 0;\n            lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n        };\n        func.isPending = function () {\n            return !!timerId.current;\n        };\n        func.flush = function () {\n            return !timerId.current ? result.current : trailingEdge(Date.now());\n        };\n        return func;\n    }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n    return debounced;\n}\n", "import useDebouncedCallback from './useDebouncedCallback';\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame). The throttled function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * const scrollHandler = useThrottledCallback(updatePosition, 100)\n * window.addEventListener('scroll', scrollHandler)\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const { callback } = useThrottledCallback(renewToken, 300000, { 'trailing': false })\n * <button onClick={callback}>click</button>\n *\n * // Cancel the trailing throttled invocation.\n * window.addEventListener('popstate', throttled.cancel);\n */\nexport default function useThrottledCallback(func, wait, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.leading, leading = _c === void 0 ? true : _c, _d = _b.trailing, trailing = _d === void 0 ? true : _d;\n    return useDebouncedCallback(func, wait, {\n        maxWait: wait,\n        leading: leading,\n        trailing: trailing,\n    });\n}\n"],
  "mappings": "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",
  "names": []
}
